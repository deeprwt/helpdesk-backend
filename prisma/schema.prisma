generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         Role
  phone        String?
  createdAt    DateTime  @default(now()) @map("created_at")

  // âœ… New optional fields
  firstName    String?
  lastName     String?
  bio          String?
  facebook     String?
  twitter      String?
  linkedin     String?
  instagram    String?

  ticketsCreated  Ticket[]   @relation("CreatedTickets")
  ticketsAssigned Ticket[]   @relation("AssignedTickets")
  comments        Comment[]
  attachments     Attachment[]
  activityLogs    ActivityLog[]
}

model Ticket {
  id          String     @id @default(uuid())
  title       String
  description String
  status      Status     @default(OPEN)
  priority    Priority   @default(MEDIUM)
  building    String?
  cluster     String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")

  createdBy User @relation("CreatedTickets", fields: [createdById], references: [id])
  createdById String

  assignedTo User? @relation("AssignedTickets", fields: [assignedToId], references: [id])
  assignedToId String?

  comments    Comment[]
  attachments Attachment[]
  activityLogs ActivityLog[]
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  createdAt DateTime @default(now()) @map("created_at")

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  user   User @relation(fields: [userId], references: [id])
  userId String
}

model Attachment {
  id        String   @id @default(uuid())
  fileUrl   String   @map("file_url")
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  uploadedBy User @relation(fields: [uploadedById], references: [id])
  uploadedById String
}

model ActivityLog {
  id        String   @id @default(uuid())
  action    String
  createdAt DateTime @default(now()) @map("created_at")

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  performedBy User @relation(fields: [performedById], references: [id])
  performedById String
}

enum Role {
  ADMIN
  AGENT
  USER
}

enum Status {
  OPEN
  IN_PROGRESS
  HOLD
  REOPENED
  REJECTED
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
