generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         Role
  phone        String?
  createdAt    DateTime @default(now()) @map("created_at")

  // âœ… New optional fields
  firstName String?
  lastName  String?
  bio       String?
  facebook  String?
  twitter   String?
  linkedin  String?
  instagram String?

  ticketsCreated  Ticket[]      @relation("CreatedTickets")
  ticketsAssigned Ticket[]      @relation("AssignedTickets")
  comments        Comment[]
  attachments     Attachment[]
  activityLogs    ActivityLog[]
}

model Ticket {
  id          String     @id @default(uuid())
  title       String
  description String
  status      Status     @default(OPEN)
  priority    Priority   @default(MEDIUM)
  building    String?
  cluster     String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // SLA-related fields
  firstResponseAt DateTime? @map("first_response_at")
  resolvedAt      DateTime? @map("resolved_at")
  dueResponseAt   DateTime? @map("due_response_at")
  dueResolutionAt DateTime? @map("due_resolution_at")
  slaBreached     Boolean   @default(false) @map("sla_breached")

  // User info (FK + snapshot fields)
  createdBy   User   @relation("CreatedTickets", fields: [createdById], references: [id])
  createdById String
  createdByName  String    // ðŸ‘ˆ store user name
  createdByEmail String    // ðŸ‘ˆ store user email

  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id])
  assignedToId String?

  comments     Comment[]
  attachments  Attachment[]
  activityLogs ActivityLog[]

  // SLA Policy
  slaPolicy   SLAPolicy? @relation(fields: [slaPolicyId], references: [id])
  slaPolicyId String?

  // Events
  events TicketEvent[]
}

model SLAPolicy {
  id                 String   @id @default(uuid())
  name               String
  priority           Priority
  responseTimeMins   Int
  resolutionTimeMins Int
  businessHours      Boolean  @default(true)

  tickets Ticket[]
}

model TicketEvent {
  id        String   @id @default(cuid())
  ticketId  String
  type      String // e.g. "CREATED", "EMAIL_SENT", "SLA_BREACH"
  message   String?
  createdAt DateTime @default(now())

  ticket Ticket @relation(fields: [ticketId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  createdAt DateTime @default(now()) @map("created_at")

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Attachment {
  id         String   @id @default(uuid())
  fileUrl    String   @map("file_url")
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  uploadedBy   User   @relation(fields: [uploadedById], references: [id])
  uploadedById String
}

model ActivityLog {
  id        String   @id @default(uuid())
  action    String
  createdAt DateTime @default(now()) @map("created_at")

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  performedBy   User   @relation(fields: [performedById], references: [id])
  performedById String
}

enum Role {
  ADMIN
  AGENT
  USER
}

enum Status {
  OPEN
  IN_PROGRESS
  HOLD
  REOPENED
  REJECTED
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
